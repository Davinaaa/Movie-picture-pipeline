name: Backend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
      - '.github/workflows/backend-cd.yaml'

jobs:
  Linting:
    runs-on: ubuntu-latest
    environment: Development Environment

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Rependencies
      working-directory: starter/backend 
      run:  |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8

    - name: Checkout Run Lint
      run: cd starter/backend && pipenv run lint

  Test:
    runs-on: ubuntu-latest

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Use Python 3
      uses:  actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Dependencies
      working-directory: starter/backend 
      run:  |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8

    - name: Test
      run: cd starter/backend && pipenv install pytest && pipenv run test

      
  Build:
    needs: [Linting, Test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Check the Repository
      uses: actions/checkout@v3



    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR Repository (if not exists)
      run: |
        aws ecr describe-repositories --repository-names backend || \
        aws ecr create-repository --repository-name backend

    - name: Build and Push Docker Image
      working-directory: starter/backend
      env:
        IMAGE_TAG: latest
        REPO_NAME: backend
        BACKEND_URL: http://a0db1abd8b8314dc29681123dcf31544-983065570.us-east-1.elb.amazonaws.com
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=$BACKEND_URL --tag 847853577083.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
        docker push 847853577083.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG

    # # commend it out as the cluster and nodes are already created
    # - name: Install eksctl
    #   run: |
    #     curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    #     sudo mv /tmp/eksctl /usr/local/bin
    
    # - name: Create EKS Cluster and Nodes
    #   run: |
    #     eksctl create cluster --name udacity-project4-2 --region us-east-1 --nodegroup-name udacity-nodes --node-type t3.small --nodes 1 --nodes-min 1 --nodes-max 2

    
    - name: Update Kubeconfig
      run:
       aws eks update-kubeconfig --name udacity-project4-2 --region us-east-1

    - name: Deploy Docker Image to Amazon EKS
      working-directory: starter/backend/k8s
      env:
        IMAGE_TAG: latest
        REPO_NAME: backend
      run: |
        aws eks update-kubeconfig --name udacity-project4-2 --region us-east-1
        kustomize edit set image backend=847853577083.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
        kustomize build | kubectl apply -f -
      
    # - name: Get Backend Service URL
    #   run: |
    #     kubectl get svc backend -n default
    
    - name: Wait for Backend Service External IP
      run: |
        for i in {1..20}; do
          EXTERNAL_IP=$(kubectl get svc backend -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [[ -n "$EXTERNAL_IP" && "$EXTERNAL_IP" != "null" ]]; then
            echo "Backend Service is available at: $EXTERNAL_IP"
            echo "BACKEND_URL=http://$EXTERNAL_IP/movies" >> $GITHUB_ENV
            break
          fi
          echo "Waiting for LoadBalancer to provision..."
          sleep 30
        done
        if [[ -z "$EXTERNAL_IP" || "$EXTERNAL_IP" == "null" ]]; then
          echo "Error: LoadBalancer did not provision within the expected time."
          exit 1
        fi

    - name: Output Backend Service URL
      run: |
        echo "Backend Service URL: $BACKEND_URL"